{
  "openapi": "3.0.0",
  "info": {
    "title": "Book Microservices API",
    "version": "1.0.0",
    "description": "API for managing a catalog of books, book inventory, and book orders"
  },
  "tags": [
    {
      "name": "Catalog",
      "description": "Responsible for managing book information"
    },
    {
      "name": "Inventory",
      "description": "Responsible for managing the quantity of each book"
    },
    {
      "name": "Order",
      "description": "Responsible for handling book orders and updating the inventory"
    }
  ],
  "paths": {
    "/catalog/book/{id}": {
      "get": {
        "summary": "get Book by ID",
        "tags": [
          "Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the requested book",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "put": {
        "summary": "update Book",
        "tags": [
          "Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to update",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated book information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Book"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated book information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "delete": {
        "summary": "delete Book",
        "tags": [
          "Catalog"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to delete",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/catalog/book": {
      "post": {
        "summary": "create Book",
        "tags": [
          "Catalog"
        ],
        "requestBody": {
          "description": "Book information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created book information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          }
        }
      }
    },
    "/inventory/book/{id}": {
      "get": {
        "summary": "get Book Quantity by ID",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to retrieve quantity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book quantity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "set Book Quantity by ID",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to set quantity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Quantity of the book",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantity set successfully"
          },
          "404": {
            "description": "Book not found"
          }
        }
      },
      "put": {
        "summary": "pdate Book Quantity by ID",
        "tags": [
          "Inventory"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the book to update quantity",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated quantity of the book",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "integer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Quantity updated successfully"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/order/book": {
      "post": {
        "summary": "Place Book Order",
        "tags": [
          "Order"
        ],
        "requestBody": {
          "description": "Order information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order placed successfully"
          },
          "400": {
            "description": "Unable to place order due to invalid data"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "publicationYear": {
            "type": "integer"
          }
        }
      },
      "BookInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "publicationYear": {
            "type": "integer"
          },
          "quantity": {
            "type": "integer"
          }
        }
      },
      "OrderInput": {
        "type": "object",
        "properties": {
          "bookId": {
            "type": "integer"
          },
          "quantity": {
            "type": "integer"
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "SwaggerHub API Auto Mocking",
      "url": "http://localhost:8080"
    }
  ]
}